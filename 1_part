//// Написать функцию которая проверяет являются две строки анаграммой или нет


function anagram(word1, word2) {
    let countWord1 = 0;
    let countWord2 = 0;
    if (word1.length === word2.length){

        for (let i = 0; i < word1.length; i++) {
        
            for (let j = 0; j < word1.length; j++) {
            
                if (word1[i] === word2[j]) {
                    countWord1++;
                }
            }
        }
        for (let i = 0; i < word1.length; i++) {
            for (let j = 0; j < word1.length; j++) {
                if (word1[i] === word1[j]) {
                    countWord2++;
                }
            }
        }
        if (countWord1 === countWord2) {
            return true;
        } return false;
    }
    return false;
}


//Рекурсия

function anagram(word1, word2, i, j, countWord1, countWord2) {
   countWord1 = countWord1 || 0;
    countWord2 = countWord2 || 0;
    if (word1.length !== word2.length){
        return false;
    }
       if( i < word1.length) {
       
           if(j < word1.length) {
           
                if (word1[i] === word2[j]) {
                    countWord1++;
                    
                       if (word1[i] === word1[j]) {
                          countWord2++;
                       }
                } else if (word1[i] === word1[j]) {
                         countWord2++;
                       }
                       return anagram(word1, word2,i,j + 1, countWord1, countWord2);
                }
           return anagram(word1, word2,i + 1,0, countWord1, countWord2);

       }
        if (countWord1 !== countWord2) {
        return false;
    }
    return true;
}

// Мемоизация

let memoisedAnangram = (function() {
    let memo = {};
return function anagram(word1, word2, i, j, countWord1, countWord2) {
    countWord1 = countWord1 || 0;
    countWord2 = countWord2 || 0;
    i = i || 0;
    j = j || 0;
    let arr = [word1, word2];
    if(arr in memo) {
        return memo[arr];
    }
        if (word1.length !== word2.length){
            memo[arr] = false;
            return false;
        }
            if( i < word1.length) {
            
                if(j < word1.length) {
                
                    if (word1[i] === word2[j]) {
                        countWord1++;
                        
                        console.log(countWord1);
                        
                        if (word1[i] === word1[j]) {
                            countWord2++;
                            console.log(countWord2);
                        }
                    } else if (word1[i] === word1[j]) {
                        countWord2++;
                        console.log(countWord2);
                    }
                    return anagram(word1, word2,i,j + 1, countWord1, countWord2);
                }
                return anagram(word1, word2,i + 1,0, countWord1, countWord2);
        
            }
            if (countWord1 !== countWord2) {
                    memo[arr] = false;
                    return false;
            }
            memo[arr] = true;
            return true;
}})();

////Написать функцию которая вычисляет подсчет количество каждой цифре в числе


function  countDigit(num) {
    let arr = [];
    let obj = {};

    for(; num > 0;) {
        arr.push(num % 10);
        num = parseInt(num/10);
    }
        for(let i = 0; i <= arr.length && arr.length > 0;) {
            let counter = 1;

            for(let j = i + 1; j <= arr.length; j++) {

                if(arr[i] === arr[j]) {
                    counter++;
                    obj[arr[i]] = counter;
                }
            }
                obj[arr[i]] = counter;
                arr = arr.filter(function(item) {
                return item !== arr[i];
                });

        }
        return obj;
};

//Рекурсия

function countDigit(num, arr, obj, i) {
    arr = arr || [];
    obj = obj || {};
    i = i || 0;
    
    for (; num > 0;) {
        arr.push(num % 10);
        num = parseInt(num/10);
    }
        if (i <= arr.length && arr.length > 0 ) {
            let counter = 1;
    
            for (let j = i + 1; j <= arr.length; j++) {
    
                if (arr[i] === arr[j]) {
                    counter++;
                    obj[arr[i]] = counter;
                }
            }
            obj[arr[i]] = counter;
            arr = arr.filter(function(item) {
                return item !== arr[i];
            });
            countDigit(num, arr, obj, i);
        }
         return obj;
}


//Мемоизация


let num = 29333;
let arr = [];
let obj ={};

for (; num > 0;) {
    arr.push(num % 10);
    num = parseInt(num/10);
};

let memoizedDigit = (function() {
    let memo = {};
    return  function countDigit(arg) {
    if (arg in memo) {
        return obj;
    }
    let i = 0;

    if (i <= arg.length && arg.length > 0 ) {
        let counter = 1;

        for (let j = i + 1; j <= arg.length; j++) {

            if (arg[i] === arg[j]) {
                counter++;
                obj[arg[i]] = counter;
            }

        };
        obj[arg[i]] = counter;
        arg = arg.filter(function(item) {
            return item !== arg[i];
        });
       
        countDigit(arg);
    } let result = obj;
    memo[arg] = result;
    return obj;
}})();

////Написать функцию которая вычисляет подсчет уникальных слов в предложении


function uniqueWords(sentence) {
sentence = sentence.toLowerCase()
console.log(sentence);
let re = (/[^а-яА-ЯёЁ]+/gui);
let arr = sentence.split(re);
arr = arr.filter(function(item) {
    return item !== "";
});

let counter = 0;
for (let i = 0; i < arr.length - 1; i++) {
    for (let j = i + 1; j < arr.length; j++ ) {
        let a = arr[i];
        let b = arr[j];
        if (a === b) {
                arr = arr.filter(function(item) {
                return item !== a;
            });
        }
    }

} return (arr.length);
}


//Рекурсия

let sentence = "Самшит, самшит, как ты крепко сшит коко шанель булавка булавка.";
    sentence = sentence.toLowerCase();
    console.log(sentence);
     let re = (/[^а-яА-ЯёЁ]+/gui);
    let arr = sentence.split(re);
    arr = arr.filter(function(item) {
        return item !== "";
    });
function countUniqueWords(arg) {
    for (let i = 0; i < arg.length; i++) {

       for (let j = i + 1; j < arg.length; j++ ) {
             if (arg[i] === arg[j]) {
                 arg = arg.filter(function(item) {
                    return item !== arg[i];
                });

                 countUniqueWords(arg);
            }

        }

    } return arg.length;

}

//Мемоизация

let sentence = "Самшит, самшит, как ты крепко сшит коко шанель булавка булавка.";
sentence = sentence.toLowerCase();
console.log(sentence);
let re = (/[^а-яА-ЯёЁ]+/gui);
let arr = sentence.split(re);
arr = arr.filter(function(item) {
    return item !== "";
});
let memoized = (function() {
    let memo = {};
    let result;
return function countUniqueWords(arg) {
    if (arr in memo) {
        return result;
    }
    for (let i = 0; i < arg.length; i++) {

        for (let j = i + 1; j < arg.length; j++ ) {
            if (arg[i] === arg[j]) {
                arg = arg.filter(function(item) {
                    return item !== arg[i];
                });

                countUniqueWords(arg);
            }

        }

    } result = arg.length;
    memo[arr] = result;
    return result;

}})();


////Написать функцию которая вычисляет вхождение каждого слова в предложении

function uniqueWords(sentence) {
    sentence = sentence.toLowerCase()
    console.log(sentence);
    let re = (/[^а-яА-ЯёЁ]+/gui);
    let arr = sentence.split(re);

    arr = arr.filter(function(item) {
        return item !== "";
    });
    let obj = {};

    for (let i = 0; i < arr.length; ) {
        let counter = 1;

        for (let j = i + 1; j <= arr.length; j++ ) {
             if (arr[i] === arr[j]) {
                counter++;

            } else if (j === arr.length) {
                console.log(arr[i]);
                obj [arr[i]] = counter;
                arr = arr.filter(function(item) {
                    return item !== arr[i];
                });
            }

        }

    } return obj;
}

//Рекурсия
let arr = sentence.toLowerCase().split((/[^а-яА-ЯёЁ]+/gui)).filter(function(item) {
    return item !== "";
});
arr = arr.filter(function(item) {
    return item !== "";
});

    let obj = {};
    function countWords (arg) {
    let i = 0;
    if (i < arg.length) {
        let counter = 1;

         for (let j = i + 1; j <= arg.length; j++ ) {
             if (arg[i] === arg[j]) {
                counter++;

            } else if (j === arg.length) {
                
                obj [arg[i]] = counter;
                 arg = arg.filter(function(item) {
                    return item !== arg[i];
                });
                 countWords(arg);
            }

        }

    } return obj;
    };
    
    //Мемоизация
let arr = sentence.toLowerCase().split((/[^а-яА-ЯёЁ]+/gui)).filter(function(item) {
    return item !== "";
});
arr = arr.filter(function(item) {
    return item !== "";
});
let obj = {};
let memoized = (function() {
    let memo = {};
return function countWords(arg) {
    if (arg in memo) {
        return obj;
    }
    let i = 0;
    if (i < arg.length) {
        let counter = 1;

        for (let j = i + 1; j <= arg.length; j++ ) {
            if (arg[i] === arg[j]) {
                counter++;

            } else if (j === arg.length) {

                obj [arg[i]] = counter;
                arg = arg.filter(function(item) {
                    return item !== arg[i];
                });
                
                countWords(arg);
            }

        }

    } let result = obj;
    memo[arg] = result;
    return obj;
}})();

////Написать функцию которая возвращает N первых чисел фибоначчи
function fibonacci (a, b, d) {
    let arr = [a,b];
    for (let i = 0; i < d; i++) {
    let c = a + b;
    arr.push (c);
    a = b;
    b = c;
    }
    return arr;
};

 //Рекурсия
 
 let arr = [];
let value;
function fibonacci(N, i) {
    if (i === 0) {
        value = i;
        arr.push(value);
        arr.push(value + 1);
       return fibonacci (N ,i+1);
    } else
    if (i < N-2 && i > 0) {
        value = arr[i-1] + arr[i];
        console.log(value);
        arr.push(value);

        return fibonacci(N ,i+1);
    }
    return arr;
};

 
//Мемоизация

let arr = [];
let value;
let memoisedFibonacci = (function() {
    let memo = {};
    return function fibonacci(N, i) {
        
        if (N in memo) {
            return memo[N];
            
        } else if (!Object.keys(memo).length == 0){
            value = memo[Object.keys(memo).length][Object.keys(memo).length -2] + memo[Object.keys(memo).length][Object.keys(memo).length-1];
            arr.push(value);
            memo[arr.length] = arr.slice();
            return fibonacci (N ,i+1);

        } else if (i === 0 && Object.keys(memo).length === 0) {
            value = i;
            arr.push(value);
            memo[i + 1] = arr.slice();
            arr.push(i + 1);
            memo[i+2] = arr.slice();
            return fibonacci (N ,i+1);
        }

        return arr;
    }})();



////Посчитать сумму всех элементов массива, только тех которые
Кратные двум

function sumMultipleTwo(arr) {
    let sum = 0;
    for (let item of arr) {
        
            if (item % 2 === 0) {
                sum += item;
            }
    } return sum;
}

В двумерном
function sumMultipleTwo(arr) {
    let sum = 0;
    let sum2 = 0;
    for (let item of arr) {
        if (Array.isArray(item)) {
            for (let i = 0; i < item.length; i++){
                if (item[i] % 2 === 0) {
                    sum2 += item[i];
                }


            } item = sum2;
            sum2 = 0;
            console.log(item);
        }
        if (item % 2 === 0) {
            sum += item;
        }
    } return sum;
}


Рекурсия
let sum = 0;

function sumMultipleTwo (arr, i) {
if (i < arr.length ) {
    if (Array.isArray(arr[i])) {
        for (let item of arr[i]) {
            if (item%2 === 0){
            sum += item;
            }
        } i++;

    } if (arr[i] % 2 === 0) {
        sum += arr[i];
    }
    console.log(arr[i]);

    sumMultipleTwo(arr, i + 1);
}
    return sum;
    }
//Мемоизация

let sum = 0;
let memoisedSumMultipleTwo = (function (){
    let memo = {};
return function sumMultipleTwo (arr, i) {
    if (arr in memo) {
        return sum;
    }
    if (i < arr.length ) {
        if (Array.isArray(arr[i])) {
            for (let item of arr[i]) {
                if (item%2 === 0){
                    sum += item;
                }
            } i++;

        } if (arr[i] % 2 === 0) {
            sum += arr[i];
        }
        console.log(arr[i]);

        sumMultipleTwo(arr, i + 1);
    } let result = arr;
    memo[arr] = result;
    return sum;
}})();



Кратные трем
function sumMultipleThree (arr) {
    let sum = 0;
    for (let item of arr) {

        if (item % 3 === 0) {
            sum += item;
        }
    } return sum;
}

В двумерном

function sumMultipleThree (arr) {
    let sum = 0;
    let sum2 = 0;
    for (let item of arr) {
        if (Array.isArray(item)) {
            for (let i = 0; i < item.length; i++){
                if (item[i] % 3 === 0) {
                    sum2 += item[i];
                }
                

            } item = sum2;
            sum2 = 0;
            console.log(item);
        }
        if (item % 3 === 0) {
            sum += item;
        }

    } return sum;
}



//Рекурсия

let sum = 0;

function sumMultipleThree (arr, i) {
if (i < arr.length ) {
    if (Array.isArray(arr[i])) {
        for (let item of arr[i]) {
            if (item%3 === 0){
            sum += item;
            }
        } i++;

    } if (arr[i] % 3 === 0) {
        sum += arr[i];
    }
    console.log(arr[i]);

    sumMultipleThree(arr, i + 1);
}
    return sum;
    }

//Мемоизация

let sum = 0;
let memoisedSumMultipleThree = (function () {
    let memo = {};
return function sumMultipleThree (arr, i) {
    
    if (arr in memo) {
        return memo[arr];
    }
    if (i < arr.length ) {
        
        if (Array.isArray(arr[i])) {
            for (let item of arr[i]) {
                if (item%3 === 0){
                    sum += item;
                }
            } i++;

        } if (arr[i] % 3 === 0) {
            sum += arr[i];
        }
        sumMultipleThree (arr, i + 1);
    } let result = sum;
    memo[arr] = result;
    return sum;
}})();

Которые только положительные и нечетные
function sumPositiveOdd (arr) {
    let sum = 0;
    for (let item of arr) {

        if (item % 2 !== 0 && item >= 0) {
            sum += item;
        }
    } return sum;
}


В двумерном
function sumPositiveOdd (arr) {
    let sum = 0;
    let sum2 = 0;
    for (let item of arr) {
        if (Array.isArray(item)) {
            for (let i = 0; i < item.length; i++){
                if (item[i] % 2 !== 0 && item[i] >= 0) {
                    sum2 += item[i];
                }
            }
           }

        if (item % 2 !== 0 && item >= 0) {
            sum += item;
        }
    } return sum + sum2;
}


Рекурсия 
let sum = 0;
function sumPositiveOdd (arr, i) {
if (i < arr.length ) {
    if (Array.isArray(arr[i])) {
        for (let item of arr[i]) {
            if (item% 2 !== 0 && item > 0){
            sum += item;
            }
        } i++;

    } if (arr[i] % 2!== 0 && arr[i] > 0) {
        sum += arr[i];
    }
    console.log(arr[i]);

    sumPositiveOdd(arr, i + 1);
}
    return sum;
    }

//Мемоизация
let sum = 0;
let memoisedSumPositiveOdd = (function (){
    let memo = {};
return  function sumPositiveOdd (arr, i) {
    
    if (arr in memo){
        return memo[arr];
    }
    
    if (i < arr.length ) {
        if (Array.isArray(arr[i])) {
            for (let item of arr[i]) {
                if (item% 2 !== 0 && item > 0){
                    sum += item;
                }
            } i++;

        } 
        
          if (arr[i] % 2!== 0 && arr[i] > 0) {
            sum += arr[i];
           }
             sumPositiveOdd(arr, i + 1);
    } let result = sum;
    memo[arr] = result;
    return sum;
}})();


//// Посчитать количество элементов массива которые 
    Нулевые 
    function countZerro (arr) {
    let count = 0;

    for (let item of arr) {
        if (item === 0) {
            count++;
        }
    } return count;
}

// В двумерном
 function countZerro (arr) {
    let count1 = 0;
    let count2 = 0;
    for (let item of arr) {
        if (Array.isArray(item)) {
            for (let i = 0; i < item.length; i++){
                if (item[i] === 0) {
                    count1++;
                }


            }

        }

        if (item === 0) {
            count2++;

        }

    } return count1 + count2;
}



//Рекурсия
let count = 0;

function countZerro (arr, i) {
if (i < arr.length ) {
    if (Array.isArray(arr[i])) {
        for (let item of arr[i]) {
            if (item === 0){
            count++;
            }
        } i++;

    } if (arr[i] === 0) {
        count++;
    }
    console.log(arr[i]);

    countZerro(arr, i + 1);
}
    return count;
    }

//Мемоизация

let count = 0;
let memoisedCountZerro = (function(){
    let memo = {};
return  function countZerro (arr, i) {
    
    if (arr in memo) {
        return memo[arr];
    }
    
    if (i < arr.length ) {
        if (Array.isArray(arr[i])) {
            for (let item of arr[i]) {
                if (item === 0){
                    count++;
                }
            } i++;

        } if (arr[i] === 0) {
            count++;
        }
       
        countZerro(arr, i + 1);
    } let result = count;
    memo[arr] = result;
    return count;
}})();

    Отрицательные
    
    function countNegative (arr) {
    let count = 0;
    
    for (let item of arr) {
        if (item < 0) {
            count++;
        }
    } return count;
}

В двумерном
function countNegative (arr) {
    let count1 = 0;
    let count2 = 0;
    for (let item of arr) {
        if (Array.isArray(item)) {
            for (let i = 0; i < item.length; i++){
                if (item[i] < 0) {
                    count1++;
                }


            }

        }

        if (item < 0) {
            count2++;

        }

    } return count1 + count2;
}




Рекурсия
let count = 0;

function countNegative (arr, i) {
if (i < arr.length ) {
    if (Array.isArray(arr[i])) {
        for (let item of arr[i]) {
            if (item < 0){
            count++;
            }
        } i++;

    } if (arr[i] < 0) {
        count++;
    }
    console.log(arr[i]);

    countNegative(arr, i + 1);
}
    return count;
    }
    
 //Мемоизация
 
 let count = 0;
let memoisedCountNegative = (function (){
    let memo = {};
return function countNegative (arr, i) {
    
    if (arr in memo) {
        return memo[arr];
    }
    if (i < arr.length ) {
        
        if (Array.isArray(arr[i])) {
            
            for (let item of arr[i]) {
                
                if (item < 0){
                    count++;
                }
            } i++;

        } if (arr[i] < 0) {
            count++;
        }
         countNegative(arr, i + 1);
    }
    let result = count;
    memo[arr] = result;
    return count;
}})();
    
Положительные
function countPositive (arr) {
    let count = 0;

    for (let item of arr) {
        if (item > 0) {
            count++;
        }
    } return count;
}

В двумерном
function countPositive (arr) {
    let count1 = 0;
    let count2 = 0;
    for (let item of arr) {
        if (Array.isArray(item)) {
            for (let i = 0; i < item.length; i++){
                if (item[i] > 0) {
                    count1++;
                }
            }
        }

        if (item > 0) {
            count2++;

        }

    } return count1 + count2;
}


Рекурсия
let count = 0;

function countPositive (arr, i) {
if (i < arr.length ) {
    if (Array.isArray(arr[i])) {
        for (let item of arr[i]) {
            if (item > 0){
            count++;
            }
        } i++;

    } if (arr[i] > 0) {
        count++;
    }
    console.log(arr[i]);

    countPositive(arr, i + 1);
}
    return count;
    }


//Мемоизация

let count = 0;
let memoisedCountPositive = (function(){
    let memo = {};
return  function countPositive (arr, i) {
    if (arr in memo) {
        return memo[arr];
    }
    if (i < arr.length ) {
        if (Array.isArray(arr[i])) {
            for (let item of arr[i]) {
                if (item > 0){
                    count++;
                }
            } i++;

        } if (arr[i] > 0) {
            count++;
        }
        
        countPositive(arr, i + 1);
    } let result = count;
    memo[arr] = result;
    return count;
}})();


Простые
function countNative (arr) {
    let count = 0;

    label:
    for (let item of arr) {
        for (let i = 2; i < item - 1; i++) {
            if (item % i === 0) {
               continue label;
            }
        }
        count++;

    }
    return count;
}

В двумерном
function countPrimeNumbers (arr) {
    let count = 0;
    let count2 = 0;
    let count3 = 0;
    for (let item of arr) {

        if (Array.isArray(item)) {

            for (let el of item) {

            for (let i = 1; i < el; i++) {

                if (el % i !== 0 ) {
                    count++;

                    if (count === el - 2) {
                        count2++;
                        count = 0;
                    }
                }

            } count = 0;

            }
        }


        for (let j = 1; j < item; j++) {

        if (item % j !== 0) {
            count++;

            if (count === item - 2) {
                count3++;
                count = 0;

            }
        }
        } count = 0;

    }

    return count2 + count3;
}


второй вариант
let sum = 0;
let count = 0;
function simpleDigit (arr) {
    for (let i = 0; i < arr.length; i++) {

            if (Array.isArray(arr[i])) {
                for (let item of arr[i]) {
                    for (let j = 1; j < item; j++) {
                        if (item % j === 0 && item > 0) {
                            count++;
                        }
                    }
                    if (count === 1) {
                        sum += count;
                        count = 0;
                    }
                }
            }
for (let j = 1; j < arr[i]; j++) {
            if (arr[i] % j === 0 && arr[i] > 0) {
                count++;

            }

} if (count === 1) {
            sum +=count;
            count = 0;
        } count = 0;
    } return sum;
}




Рекурсия
let sum = 0;
let count = 0;
function simpleDigit (arr, i) {
    if (i < arr.length) {

            if (Array.isArray(arr[i])) {
                for (let item of arr[i]) {
                    for (let j = 1; j < item; j++) {
                        if (item % j === 0 && item > 0) {
                            count++;
                        }
                    }
                    if (count === 1) {
                        sum += count;
                        count = 0;
                    }
                }
            }
for (let j = 1; j < arr[i]; j++) {
            if (arr[i] % j === 0 && arr[i] > 0) {
                count++;

            }

} if (count === 1) {
            sum +=count;
            count = 0;
        } count = 0;
        simpleDigit (arr, i + 1);
    }

    return sum;
}

//Мемоизация

let sum = 0;
let count = 0;
let memoisedSimpleDigit = (function() {
    let memo = {};
return function simpleDigit (arr, i) {

    if (arr in memo) {
        return memo[arr];
    }

      if (i < arr.length) {

        if (Array.isArray(arr[i])) {

            for (let item of arr[i]) {

                for (let j = 1; j < item; j++) {

                    if (item % j === 0 && item > 0) {
                        count++;
                    }
                }

                if (count === 1) {
                    sum += count;
                    count = 0;
                }
            }
        }
        for (let j = 1; j < arr[i]; j++) {
            if (arr[i] % j === 0 && arr[i] > 0) {
                count++;

            }

        } if (count === 1) {
            sum +=count;
            count = 0;
        } count = 0;
        simpleDigit (arr, i + 1);
    }

    let result = sum;
    memo[arr] = result;
    return sum;
}})();


////Написать функции которые преобразовывают число из десятичной системы счисления в двоичную и в обратную сторону. (Достаточно написать для целых положительных чисел)


function decimalConversion(num) {
    let sum = 0;
    for (let i = 0; i < num.length; i++) {
        if(parseInt(num[i]) === 1) {
            sum += Math.pow(2, num.length - i - 1);
        }
    }

    return sum;
}


Рекурсия 

let sum = 0;
function decimalConversion (num, i, j) {
    num = String(num);
    console.log(j);
    if (i <= num.length && j < num.length) {
        console.log(num.length);
if (num[j] == 1) {
        sum += Math.pow(2, num.length - i)
}
        console.log(Math.pow(2, num.length - i));
        decimalConversion (num, i + 1, j + 1)
    }
    return sum;
}


function binaryTranslation(a) {
    let arr = [];
    for (;a >= 1;) {
        arr.unshift (a % 2);
        a = parseInt(a/2);
    } return arr.join('')
}




рекурсия 

let arr = [];
function binaryTranslation(a) {

    if (a >= 1) {
        arr.unshift (a % 2);
        binaryTranslation(parseInt(a/2));
    } return arr.join('')
}

//Мемоизация
let arr = [];
let memoisedBinaryTranslation = (function () {
    let memo = {};
return  function binaryTranslation(a) {
if (a in memo) {
    return memo[a];
}
    if (a >= 1) {
        arr.unshift (a % 2);
        binaryTranslation(parseInt(a/2));
    } let result =  arr.join('')
    memo[a] = result;
    return result
}})();


Из двоичной в десятичную

function decimalConversion(num) {
    let sum = 0;
    for (let i = 0; i < num.length; i++) {
        if(parseInt(num[i]) === 1) {
            sum += Math.pow(2, num.length - i - 1);
        }
    }

    return sum;
}

console.log(decimalConversion('11101'));

//Рекурсия 

let sum = 0;
function decimalConversion (num, i, j) {
    num = String(num);
    console.log(j);
    if (i <= num.length && j < num.length) {
        console.log(num.length);
if (num[j] == 1) {
        sum += Math.pow(2, num.length - i)
}
        console.log(Math.pow(2, num.length - i));
        decimalConversion (num, i + 1, j + 1)
    }
    return sum;
}
console.log(decimalConversion (11101, i = 1, 0));


//Мемоизация

let sum = 0;
let memoisedDecimalConversion = (function(){
    let memo = {};
return function decimalConversion (num, i, j) {
    if (num in memo) {
        return memo[num];
    }
    num = String(num);
    console.log(j);
    if (i <= num.length && j < num.length) {
         if (num[j] == 1) {
            sum += Math.pow(2, num.length - i)
        }
        console.log(Math.pow(2, num.length - i));
        decimalConversion (num, i + 1, j + 1)
    }
    let result = sum;
    memo[num] = result;
    return sum;
}})();


////Посчитать сумму значений чисел от min до max
только положительные
function sum (a,b) {
let sum = 0;
let d;
for (let i = 0; i < b - (a - 1); i++) {
    d = a + i;

        if (d > 0) {
            sum +=d;
        }
   } return sum;
}


//Рекурсия
let sum = 0;
function sumUpToMax (min,max) {
    if (min <= max) {
        if (min > 0) {
            sum +=min;
        } sumUpToMax (min + 1,max);
    }
    return sum;
}

let sum = 0;
let memoisedSumUpToMax = (function(){
    let memo = {};
return function sumUpToMax (min,max) {
    let arr = [min,max];
    if(arr in memo){
        return memo[arr];
    }
    if (min <= max) {
        if (min > 0) {
            sum +=min;
        } sumUpToMax (min + 1,max);
    } let result = sum;
    memo[arr] = result;
    return sum;
}})();

только тех которые кратны 3

function sum (a,b) {
let sum = 0;
let d;
for (let i = 0; i < b - 1); i++) {
    d = a + i;
    
        if (d%3 === 0) {
            sum +=d;
        }
   } return sum;
}



//Рекурсия
let sum = 0;
function sumUpToMax (min,max,divider) {
    if (min <= max) {
        if (min % divider === 0) {
            sum +=min;
        } sumUpToMax (min + 1,max,divider);
    }
    return sum;
}


//Мемоизация
let sum = 0;
let memoisedSumUpToMax = (function (){
    let memo = {};
return function sumUpToMax (min,max,divider) {
    let arr = [min,max,divider];
    if (arr in memo){
        return memo[arr];
    }
    if (min <= max) {
        if (min % divider === 0) {
            sum +=min;
            } sumUpToMax (min + 1,max,divider);
    }
    let result = sum;
    memo[arr] = result;
    return sum;
}})();

всех
function sum (min,max) {
    let sum = 0;
    let c = min;
    for (let i = 1; i < max - (min-1); i++) {

        sum = c + (min + i);
        c = sum;

    } return sum;
}


Рекурсия
function sumUptoMax (min,max) {
    let sum = 0;
    if (min <= max) {
        sum = min + sumUptoMax (min + 1,max);
    } return sum;
}

//Мемоизация

let memoisedSumUptoMax = (function (){
    let memo = {};
return function sumUptoMax (min,max) {
    let arr = [min,max];
    if (arr in memo){
        return memo[arr];
    }
    let sum = 0;
    if (min <= max) {
        sum = min + sumUptoMax (min + 1,max);
    } let result = sum;
    memo[arr] = result;
    return sum;
}})();


////Найти среднее значение всех элементов одномерного/двумерного массива (Среднее только тех которые четные и которые не четные)
всех в одномерном
function sumAll (arr) {
    let sum = 0;
    let count = 0;
    for (let item of arr) {
        sum += item;
        count++;
    } return sum/count;
}

всех в двумерном
function average (arr) {
    let sum = 0;

    let count = 0;

    for (let item of arr) {
        if (Array.isArray(item)) {

            for (let el of item){
                count++;
                sum += el;
                }
        } else if (typeof item === "number") {
            count++;

        sum += item;

        }

    } return sum/count;
}

среднее значение в одномерном кратное двум
function sumMultipleTwo (arr) {
    let sum = 0;
    let count = 0;
    for (let item of arr) {

        if (item % 2 === 0) {
            sum += item;
            count++;
        }
    } return sum/count;
}

среднее значение в одномерном массиве нечтных значений
function sumMultipleTwo (arr) {
    let sum = 0;
    let count = 0;
    for (let item of arr) {

        if (item % 2 !== 0) {
            sum += item;
            count++;
        }
    } return sum/count;
}


среднее значение в двумерном массиве нечтных значений

    for (let item of arr) {
        if (Array.isArray(item)) {

            for (let el of item){
                if (el % 2 === 0) {
                count++;
                sum += el;
                }
            }
        } else if (typeof item === "number" && item % 2 ===0) {
            count++;

        sum += item;

        }

    } return sum/count;
}

////Транспонировать матрицу
let arrSt = [];
for (let i = 0; i < arr[0].length; i++) {
    arrSt.push([]);
}

for (let a = 0; a < arr.length; a++) {

    for (let j = 0; j < arr[0].length; j++) {
        arrSt[j].push(arr[a][j]);

    }

}
 console.log(arrSt);
}

// Мемоизация

let arrSt = [];
let memoisedMatrixTranspose = ( function(){
    let memo = {};
    return function matrixTranspose (arr,j,i) {
      if (arr in memo) {
    return memo[arr];
       }
        if (i < arr.length)  {

            if (j < arr[0].length) {
                arrSt.push([]);
                arrSt[j].push(arr[i][j]);
                return matrixTranspose(arr,j+1,i);

            }
            return matrixTranspose(arr,0,i +1);
        } let result = arrSt.filter(function (el) {
            return el.length !== 0;
        });
        memo[arr] = result
        return result;
    }})();

//рекурсия

let arrSt = [];
function matrix (arr,j,i) {

    if (i < arr.length)  {

        if (j < arr[0].length) {
           arrSt.push([]);
            arrSt[j].push(arr[i][j]);
            return matrix(arr,j+1,i);

        }
        return matrix(arr,0,i +1);
    }
    return arrSt.filter(function (el) {
        return el.length !== 0;
    });;
}

////Сложить две матрицы
let matrixSum = [];
let sum = 0;
function sumMatrix (...matrix) {
for (let i = 0; i < matrix[0].length; i++){
    matrixSum.push([]);
    for (let j =0; j < matrix[0][0].length; j++) {
        for (let e = 0; e < matrix.length; e++) {
            sum += matrix[e][i][j]
        } matrixSum[i].push(sum);
        console.log(sum);
    }

    } return matrixSum;
}



Рекурсия
let arrSumMatrices = [];
let sum = 0;
function sumMatrices (i,j,matr1,matr2) {
   if (i < matr1.length) {
       if (j < matr1[j].length){
           if(j === 0) {
               arrSumMatrices.push([]);
           }
           sum = matr1[i][j] + matr2[i][j];
           arrSumMatrices[i].push(sum);
           return sumMatrices (i,j+1,matr1,matr2);
       }
       return sumMatrices (i+1,0,matr1,matr2);
   }
     return arrSumMatrices;
}

//Мемоизация
let arrSumMatrices = [];
let sum = 0;
let memoisedSumMatrices = (function(){
    let memo = {};
return  function sumMatrices (i,j,matr1,matr2) {
    let arrMatrix = [matr1,matr2];
    if (arrMatrix in memo) {
        return memo[arrMatrix];
    } else

    if (i < matr1.length) {
        if (j < matr1[j].length){
            if(j === 0) {
                arrSumMatrices.push([]);
            }
            sum = matr1[i][j] + matr2[i][j];
            arrSumMatrices[i].push(sum);
            return sumMatrices (i,j+1,matr1,matr2);
        }
        return sumMatrices (i+1,0,matr1,matr2);
    } let result = arrSumMatrices;
    memo[arrMatrix] = result;
    return arrSumMatrices;
}})();


////Удалить из двумерного массива строку в которой присутствует хотя бы один нулевой элемент. Для столбца аналогично реализовать.

function matrixCleanZero (matrix) {

for (let i = 0; i < matrix.length; i++) {

    for (let j = 0; j < matrix[i].length; j++) {
        if (matrix[i][j] === 0) {

            matrix.splice(i,1);
        }
    }
}
        return matrix;
  }


Рекурсия

function matrixCleanZero (i,j,matrix) {

    if (i < matrix.length) {

        if (j < matrix[i].length) {
            if (matrix[i][j] === 0) {

                matrix.splice(i,1);

            } return matrixCleanZero (i,j+1,matrix);

        } return matrixCleanZero (i+1,0,matrix);
    }
    return matrix;
}

function matrixCleanZero (matrix) {

for (let i = 0; i < matrix.length; i++) {

    for (let j = 0; j < matrix[i].length; j++) {
        if (matrix[i][j] === 0) {
for (let i = 0; i < matrix.length; i++) {
            matrix[i].splice(j,1);
}
        }
    }
}
        return matrix;
  }




Рекурсия

let count = 0;
function matrixCleanZero (i,j,matrix) {
    if (i < matrix.length) {
        if(j < matrix[i].length) {
            if (matrix[i][j] === 0) {
                  count++;
                  matrix[i].splice(j,1);
                return matrixCleanZero (i+1,j,matrix);
            } else if (count > 0) {
                      matrix[i].splice(j,1);
                return matrixCleanZero (i+1,j,matrix);
            }return matrixCleanZero (0,j+1,matrix);
        }
    }
    return matrix;
}


////Факториал
function factorial (n) {
    let a = 1;
    let b = 2;
    let c;
    for (let i = 2; i <= n; i++ ) {
        c = a * b;
        a = c;
        b = b + 1;
    } return c;
}


//Рекурсия 

result = 1;
function factorial (n) {
    if (n > 0) {
        result = n * factorial (n -1);
    }
    return result;
}


let sum = 1;
let memoisedFactorial = (function() {
    let memo = {};
return function factorial (n) {
    if (n in memo) {
        return memo[n];
    }

    if (n > 0) {
        sum = n * factorial (n -1);
    }let result = sum;
    memo[n] = result;
    return result;
}})();
