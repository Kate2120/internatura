//bind

function sum() {
    return this.term1 + this.term2;
}
let digit = {
    term1: 2,
    term2: 1,
}

function customBind(fn, context){
    function worksLikeBind() {
        let key = "uniqKeyForFn";
        context[key] = fn;
        let result = context[key]();
        delete context[key];
        return result;
    }
    return worksLikeBind();
}

//call
let customCall = (function likeCall(fn, context){
    function worksLikeCall() {
        let key = "uniqKeyForFn";
        context[key] = fn;
        let result = context[key]();
        delete context[key];
        return result;
    }
    return worksLikeCall();
})(sum, digit);

//map

let customFunctionMap = (function likeMap(argument){
    let newArray = [];
    for(let i = 0; i < argument.length; i++){
        let result = argument[i] * 5;
        newArray.push(result);
    }
    return newArray;
})([1,2,3]);

//filter

let customFilter = (function likeFilter(argument){
    let newArray = [];
    for(let i = 0; i < argument.length; i++){
        if(!argument[i] == 0) {
            newArray.push(argument[i]);
        }
    }
    return newArray;
})([1,0,3,5,0,7,8,0]);

//reduce

let customReduce = (function likeReduce(argument){
    let result = 0;
    for(let i = 0; i < argument.length; i++){
        result += argument[i];
    }
    return result;
})([1,0,3,4,2]);
